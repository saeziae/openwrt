From fc5a75e1c608d5255ae16a5b0430956619ffbd65 Mon Sep 17 00:00:00 2001
From: xianbing Zhu <xianbing.zhu@linux.alibaba.com>
Date: Wed, 5 Jun 2024 16:49:36 +0800
Subject: [PATCH 071/129] stmmac:dwmac-thead: add support for suspend/resume
 feature

Add support pm & runtime pm for thead_dwmac,suspend use local
defination. And dts adds clks info.
Added dd ptp clk set and enable.

Signed-off-by: xianbing Zhu <xianbing.zhu@linux.alibaba.com>
---
 arch/riscv/boot/dts/thead/th1520.dtsi         |  18 +-
 .../net/ethernet/stmicro/stmmac/dwmac-thead.c | 295 +++++++++++++++++-
 2 files changed, 292 insertions(+), 21 deletions(-)

--- a/arch/riscv/boot/dts/thead/th1520.dtsi
+++ b/arch/riscv/boot/dts/thead/th1520.dtsi
@@ -318,12 +318,15 @@
 		};
 
 		gmac0: ethernet@ffe7070000 {
-			compatible = "thead,th1520-dwmac", "snps,dwmac-3.70a";
+			compatible = "thead,th1520-dwmac";
 			reg = <0xff 0xe7070000 0x0 0x2000>;
 			interrupts = <66 IRQ_TYPE_LEVEL_HIGH>;
 			interrupt-names = "macirq";
-			clocks = <&gmac_clk>, <&gmac_axi_clk>;
-			clock-names = "stmmaceth", "pclk";
+			clocks = <&clk CLKGEN_GMAC0_CCLK>,
+					 <&clk CLKGEN_GMAC0_PCLK>,
+					 <&clk CLKGEN_GMAC_AXI_ACLK>,
+					 <&clk CLKGEN_GMAC_AXI_PCLK>;
+			clock-names = "stmmaceth", "pclk", "axi_aclk","axi_pclk";
 			snps,pbl = <32>;
 			snps,fixed-burst;
 			snps,multicast-filter-bins = <64>;
@@ -340,12 +343,15 @@
 		};
 
 		gmac1: ethernet@ffe7060000 {
-			compatible = "thead,th1520-dwmac", "snps,dwmac-3.70a";
+			compatible = "thead,th1520-dwmac";
 			reg = <0xff 0xe7060000 0x0 0x2000>;
 			interrupts = <67 IRQ_TYPE_LEVEL_HIGH>;
 			interrupt-names = "macirq";
-			clocks = <&gmac_clk>, <&gmac_axi_clk>;
-			clock-names = "stmmaceth", "pclk";
+			clocks = <&clk CLKGEN_GMAC1_CCLK>,
+					 <&clk CLKGEN_GMAC1_PCLK>,
+					 <&clk CLKGEN_GMAC_AXI_ACLK>,
+					 <&clk CLKGEN_GMAC_AXI_PCLK>;
+			clock-names = "stmmaceth", "pclk","axi_aclk","axi_pclk";
 			snps,pbl = <32>;
 			snps,fixed-burst;
 			snps,multicast-filter-bins = <64>;
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac-thead.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac-thead.c
@@ -15,6 +15,7 @@
 #include <linux/of_net.h>
 #include <linux/platform_device.h>
 #include <linux/regmap.h>
+#include <linux/pm_runtime.h>
 
 #include "stmmac_platform.h"
 
@@ -64,8 +65,12 @@ struct thead_dwmac {
 	struct device *dev;
 	u32 rx_delay;
 	u32 tx_delay;
+	struct clk *gmac_axi_aclk;
+	struct clk *gmac_axi_pclk;
 };
 
+#define  pm_debug dev_dbg	/* for suspend/resume interface debug info */
+
 static int thead_dwmac_set_phy_if(struct plat_stmmacenet_data *plat)
 {
 	struct thead_dwmac *dwmac = plat->bsp_priv;
@@ -227,16 +232,16 @@ static void thead_dwmac_set_ptp_clk(stru
 }
 
 static int thead_dwmac_init(struct platform_device *pdev,
-			    struct plat_stmmacenet_data *plat)
+			    void *bsp_priv)
 {
-	struct thead_dwmac *dwmac = plat->bsp_priv;
+	struct thead_dwmac *dwmac = bsp_priv;
 	int ret;
 
-	ret = thead_dwmac_set_phy_if(plat);
+	ret = thead_dwmac_set_phy_if(dwmac->plat);
 	if (ret)
 		return ret;
 
-	ret = thead_dwmac_set_txclk_dir(plat);
+	ret = thead_dwmac_set_txclk_dir(dwmac->plat);
 	if (ret)
 		return ret;
 
@@ -247,9 +252,105 @@ static int thead_dwmac_init(struct platf
 
 	thead_dwmac_fix_speed(dwmac, SPEED_1000, 0);
 
-	thead_dwmac_set_ptp_clk(plat,GMAC_PTP_CLK_RATE);
+	thead_dwmac_set_ptp_clk(dwmac->plat,GMAC_PTP_CLK_RATE);
+
+	return thead_dwmac_enable_clk(dwmac->plat);
+}
 
-	return thead_dwmac_enable_clk(plat);
+int thead_dwmac_clk_enable(struct platform_device *pdev, void *bsp_priv)
+{
+	struct thead_dwmac *thead_plat_dat = bsp_priv;
+	struct device *dev = &pdev->dev;
+	int ret;
+	pm_debug(dev,"enter %s()\n",__func__);
+
+	ret = clk_prepare_enable(thead_plat_dat->gmac_axi_aclk);
+	if (ret) {
+		dev_err(dev, "Failed to enable clk 'gmac_axi_aclk'\n");
+		return -EINVAL;
+	}
+	ret = clk_prepare_enable(thead_plat_dat->gmac_axi_pclk);
+	if (ret) {
+		clk_disable_unprepare(thead_plat_dat->gmac_axi_aclk);
+		dev_err(dev, "Failed to enable clk 'gmac_axi_pclk'\n");
+		return -EINVAL;
+	}
+	
+	return ret;
+}
+
+void thead_dwmac_clk_disable(struct platform_device *pdev, void *bsp_priv)
+{
+	struct thead_dwmac *thead_plat_dat = bsp_priv;
+	struct device *dev = &pdev->dev;
+	pm_debug(dev,"enter %s()\n",__func__);
+	
+	clk_disable_unprepare(thead_plat_dat->gmac_axi_aclk);
+	clk_disable_unprepare(thead_plat_dat->gmac_axi_pclk);
+
+	return ;
+}
+
+/**
+ * dwmac1000_validate_mcast_bins - validates the number of Multicast filter bins
+ * @dev: struct device of the platform device
+ * @mcast_bins: Multicast filtering bins
+ * Description:
+ * this function validates the number of Multicast filtering bins specified
+ * by the configuration through the device tree. The Synopsys GMAC supports
+ * 64 bins, 128 bins, or 256 bins. "bins" refer to the division of CRC
+ * number space. 64 bins correspond to 6 bits of the CRC, 128 corresponds
+ * to 7 bits, and 256 refers to 8 bits of the CRC. Any other setting is
+ * invalid and will cause the filtering algorithm to use Multicast
+ * promiscuous mode.
+ */
+static int dwmac1000_validate_mcast_bins(struct device *dev, int mcast_bins)
+{
+	int x = mcast_bins;
+
+	switch (x) {
+	case HASH_TABLE_SIZE:
+	case 128:
+	case 256:
+		break;
+	default:
+		x = 0;
+		dev_info(dev, "Hash table entries set to unexpected value %d\n",
+			 mcast_bins);
+		break;
+	}
+	return x;
+}
+
+/**
+ * dwmac1000_validate_ucast_entries - validate the Unicast address entries
+ * @dev: struct device of the platform device
+ * @ucast_entries: number of Unicast address entries
+ * Description:
+ * This function validates the number of Unicast address entries supported
+ * by a particular Synopsys 10/100/1000 controller. The Synopsys controller
+ * supports 1..32, 64, or 128 Unicast filter entries for it's Unicast filter
+ * logic. This function validates a valid, supported configuration is
+ * selected, and defaults to 1 Unicast address if an unsupported
+ * configuration is selected.
+ */
+static int dwmac1000_validate_ucast_entries(struct device *dev,
+					    int ucast_entries)
+{
+	int x = ucast_entries;
+
+	switch (x) {
+	case 1 ... 32:
+	case 64:
+	case 128:
+		break;
+	default:
+		x = 1;
+		dev_info(dev, "Unicast table entries set to unexpected value %d\n",
+			 ucast_entries);
+		break;
+	}
+	return x;
 }
 
 static int thead_dwmac_probe(struct platform_device *pdev)
@@ -258,22 +359,35 @@ static int thead_dwmac_probe(struct plat
 	struct stmmac_resources stmmac_res;
 	struct thead_dwmac *dwmac;
 	struct device_node *np = pdev->dev.of_node;
+	struct device *dev = &pdev->dev;
 	u32 delay_ps;
 	int ret;
 
+	dwmac = devm_kzalloc(&pdev->dev, sizeof(*dwmac), GFP_KERNEL);
+	if (!dwmac)
+		return -ENOMEM;
+
 	ret = stmmac_get_platform_resources(pdev, &stmmac_res);
 	if (ret)
 		return dev_err_probe(&pdev->dev, ret,
 				     "failed to get resources\n");
 
-	plat = devm_stmmac_probe_config_dt(pdev, stmmac_res.mac);
+	plat = stmmac_probe_config_dt(pdev, stmmac_res.mac);
 	if (IS_ERR(plat))
 		return dev_err_probe(&pdev->dev, PTR_ERR(plat),
 				     "dt configuration failed\n");
 
-	dwmac = devm_kzalloc(&pdev->dev, sizeof(*dwmac), GFP_KERNEL);
-	if (!dwmac)
-		return -ENOMEM;
+	of_property_read_u32(np, "max-frame-size", &plat->maxmtu);
+	of_property_read_u32(np, "snps,multicast-filter-bins",
+					&plat->multicast_filter_bins);
+	of_property_read_u32(np, "snps,perfect-filter-entries",
+					&plat->unicast_filter_entries);
+	plat->unicast_filter_entries = dwmac1000_validate_ucast_entries(
+			&pdev->dev, plat->unicast_filter_entries);
+	plat->multicast_filter_bins = dwmac1000_validate_mcast_bins(
+			&pdev->dev, plat->multicast_filter_bins);
+	plat->has_gmac = 1;
+	plat->pmt = 1;
 
 	if (!of_property_read_u32(np, "rx-internal-delay-ps", &delay_ps))
 		dwmac->rx_delay = delay_ps;
@@ -281,22 +395,173 @@ static int thead_dwmac_probe(struct plat
 		dwmac->tx_delay = delay_ps;
 
 	dwmac->apb_regmap = syscon_regmap_lookup_by_phandle(np, "thead,gmacapb");
-	if (IS_ERR(dwmac->apb_regmap))
-		return dev_err_probe(&pdev->dev, PTR_ERR(dwmac->apb_regmap),
+	if (IS_ERR(dwmac->apb_regmap)) {
+		ret = dev_err_probe(&pdev->dev, PTR_ERR(dwmac->apb_regmap),
 				     "Failed to get gmac apb syscon\n");
+		goto err_remove_config_dt;
+	}
+	dwmac->gmac_axi_aclk = devm_clk_get(dev, "axi_aclk");
+	if (IS_ERR(dwmac->gmac_axi_aclk)) {
+		dev_err(dev, "gmac axi_aclk not exist, skipped it\n");
+	}
+	dwmac->gmac_axi_pclk = devm_clk_get(dev, "axi_pclk");
+	if (IS_ERR(dwmac->gmac_axi_pclk)) {
+		dev_err(dev, "gmac axi_pclk not exist, skipped it\n");
+	}
 
 	dwmac->dev = &pdev->dev;
 	dwmac->plat = plat;
 	plat->bsp_priv = dwmac;
 	plat->fix_mac_speed = thead_dwmac_fix_speed;
+	plat->init = thead_dwmac_init;
+
+	ret = thead_dwmac_clk_enable(pdev,dwmac);
+	if (ret)
+		goto err_remove_config_dt;
 
-	ret = thead_dwmac_init(pdev, plat);
+	ret = thead_dwmac_init(pdev, dwmac);
 	if (ret)
+		goto err_exit;
+
+	ret = stmmac_dvr_probe(&pdev->dev, plat, &stmmac_res);
+	if (ret)
+		goto err_exit;
+	
+	return 0;
+
+err_exit:
+	dev_err(dev,"%s: dwmac probe faild,ret%d\n",__func__,ret);
+	thead_dwmac_clk_disable(pdev, dwmac);
+err_remove_config_dt:
+	stmmac_remove_config_dt(pdev, plat);
+	return ret;
+}
+/**
+ * thead_dwmac_suspend
+ * @dev: device pointer
+ * Description: this function is invoked when suspend the driver and it direcly
+ * call the main suspend function and then, if required, on some platform, it
+ * can call an exit helper.
+ */
+static int __maybe_unused thead_dwmac_suspend(struct device *dev)
+{
+	int ret;
+	struct net_device *ndev = dev_get_drvdata(dev);
+	struct stmmac_priv *priv = netdev_priv(ndev);
+	struct platform_device *pdev = to_platform_device(dev);
+	pm_debug(dev,"enter %s()\n",__func__);
+	ret = stmmac_suspend(dev);
+	if (priv->plat->exit)
+		priv->plat->exit(pdev, priv->plat->bsp_priv);
+	
+	return ret;
+}
+
+/**
+ * thead_dwmac_resume
+ * @dev: device pointer
+ * Description: this function is invoked when resume the driver before calling
+ * the main resume function, on some platforms, it can call own init helper
+ * if required.
+ */
+static int __maybe_unused thead_dwmac_resume(struct device *dev)
+{
+	struct net_device *ndev = dev_get_drvdata(dev);
+	struct stmmac_priv *priv = netdev_priv(ndev);
+	struct platform_device *pdev = to_platform_device(dev);
+	pm_debug(dev,"enter %s()\n",__func__);
+
+	pm_runtime_get_sync(dev);
+	if (priv->plat->init)
+		priv->plat->init(pdev, priv->plat->bsp_priv);
+	pm_runtime_put(dev);
+
+	return stmmac_resume(dev);
+}
+
+static int __maybe_unused thead_dwmac_runtime_suspend(struct device *dev)
+{
+	struct net_device *ndev = dev_get_drvdata(dev);
+	struct stmmac_priv *priv = netdev_priv(ndev);
+	struct platform_device *pdev = to_platform_device(dev);
+	pm_debug(dev,"enter %s()\n",__func__);
+	stmmac_bus_clks_config(priv, false);
+	thead_dwmac_clk_disable(pdev, priv->plat->bsp_priv);
+	return 0;
+}
+
+static int __maybe_unused thead_dwmac_runtime_resume(struct device *dev)
+{
+	struct net_device *ndev = dev_get_drvdata(dev);
+	struct stmmac_priv *priv = netdev_priv(ndev);
+	struct platform_device *pdev = to_platform_device(dev);
+	int ret;
+	pm_debug(dev,"enter %s()\n",__func__);
+	ret = stmmac_bus_clks_config(priv, true);
+	if(ret)
+		return ret;
+	ret = thead_dwmac_clk_enable(pdev, priv->plat->bsp_priv);
+	if(ret)
 		return ret;
 
-	return stmmac_dvr_probe(&pdev->dev, plat, &stmmac_res);
+	return 0;
+}
+
+static int __maybe_unused thead_dwmac_noirq_suspend(struct device *dev)
+{
+	struct net_device *ndev = dev_get_drvdata(dev);
+	struct stmmac_priv *priv = netdev_priv(ndev);
+	int ret;
+	pm_debug(dev,"enter %s()\n",__func__);
+	if (!netif_running(ndev))
+		return 0;
+
+	if (!device_may_wakeup(priv->device) || !priv->plat->pmt) {
+		/* Disable clock in case of PWM is off */
+		clk_disable_unprepare(priv->plat->clk_ptp_ref);
+
+		ret = pm_runtime_force_suspend(dev);
+		if (ret)
+			return ret;
+	}
+
+	return 0;
+}
+
+static int __maybe_unused thead_dwmac_noirq_resume(struct device *dev)
+{
+	struct net_device *ndev = dev_get_drvdata(dev);
+	struct stmmac_priv *priv = netdev_priv(ndev);
+	int ret;
+	pm_debug(dev,"enter %s()\n",__func__);
+	if (!netif_running(ndev))
+		return 0;
+
+	if (!device_may_wakeup(priv->device) || !priv->plat->pmt) {
+		/* enable the clk previously disabled */
+		ret = pm_runtime_force_resume(dev);
+		if (ret)
+			return ret;
+
+		ret = clk_prepare_enable(priv->plat->clk_ptp_ref);
+		if (ret < 0) {
+			netdev_warn(priv->dev,
+				    "failed to enable PTP reference clock: %pe\n",
+				    ERR_PTR(ret));
+			return ret;
+		}
+	}
+
+	return 0;
 }
 
+/*similar with stmmac_pltfr_pm_ops,but clks enable/disable add this drv need */
+const struct dev_pm_ops thead_dwmac_pm_ops = {
+	SET_SYSTEM_SLEEP_PM_OPS(thead_dwmac_suspend, thead_dwmac_resume)
+	SET_RUNTIME_PM_OPS(thead_dwmac_runtime_suspend, thead_dwmac_runtime_resume, NULL)
+	SET_NOIRQ_SYSTEM_SLEEP_PM_OPS(thead_dwmac_noirq_suspend, thead_dwmac_noirq_resume)
+};
+
 static const struct of_device_id thead_dwmac_match[] = {
 	{ .compatible = "thead,th1520-dwmac" },
 	{ }
@@ -308,7 +573,7 @@ static struct platform_driver thead_dwma
 	.remove_new = stmmac_pltfr_remove,
 	.driver = {
 		.name = "thead-dwmac",
-		.pm = &stmmac_pltfr_pm_ops,
+		.pm = &thead_dwmac_pm_ops,
 		.of_match_table = thead_dwmac_match,
 	},
 };
