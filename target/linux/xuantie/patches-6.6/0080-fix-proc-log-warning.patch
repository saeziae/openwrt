From 198b1ce25478feaa206c9daa806f9186fdda7373 Mon Sep 17 00:00:00 2001
From: "xiaojin.cxj" <xiaojin.cxj@linux.alibaba.com>
Date: Fri, 7 Jun 2024 10:13:35 +0800
Subject: [PATCH 080/129] fix proc log warning

---
 drivers/firmware/thead/th1520_proc_debug.c | 72 ++++++++++++----------
 1 file changed, 41 insertions(+), 31 deletions(-)

--- a/drivers/firmware/thead/th1520_proc_debug.c
+++ b/drivers/firmware/thead/th1520_proc_debug.c
@@ -4,7 +4,6 @@
  * Copyright (C) 2021 Alibaba Group Holding Limited.
  */
 
-
 #include <linux/delay.h>
 #include <linux/interrupt.h>
 #include <linux/module.h>
@@ -18,7 +17,7 @@
 #include <linux/io.h>
 #include <asm/cacheflush.h>
 
-#define GET_PAGE_NUM(size, offset)                                             \
+#define GET_PAGE_NUM(size, offset) \
 	((((size) + ((offset) & ~PAGE_MASK)) + PAGE_SIZE - 1) >> PAGE_SHIFT)
 
 struct th1520_log_ring_buffer {
@@ -62,54 +61,63 @@ static int log_proc_show(struct seq_file
 	char *buf;
 	size_t i;
 	/*dcache clean and invalid*/
-    ALT_CMO_OP(flush, (phys_to_virt(log_ctrl->log_phy)), ((char*)log_ctrl->log_phy + sizeof(struct th1520_hw_log)), riscv_cbom_block_size);
+	ALT_CMO_OP(flush, (phys_to_virt(log_ctrl->log_phy)),
+		   sizeof(struct th1520_hw_log),
+		   riscv_cbom_block_size);
 
 	uint32_t write = __raw_readl(&log_ctrl->log->rb.write);
-	uint32_t read  = __raw_readl(&log_ctrl->log->rb.read);
-	uint32_t size =  __raw_readl(&log_ctrl->log->rb.size);
-	size_t log_size  = write >= read ? write - read : size +  write - read;
+	uint32_t read = __raw_readl(&log_ctrl->log->rb.read);
+	uint32_t size = __raw_readl(&log_ctrl->log->rb.size);
+	size_t log_size = write >= read ? write - read : size + write - read;
 
-    seq_printf(file,"****************** device log >>>>>>>>>>>>>>>>>\n");
+	seq_printf(file, "****************** device log >>>>>>>>>>>>>>>>>\n");
 	dump_regs(__func__, log_ctrl);
-	if(!log_size) {
-		 seq_printf(file,"****************** end device log <<<<<<<<<<<<<<<<<\n");
-		 return 0;
+	if (!log_size) {
+		seq_printf(
+			file,
+			"****************** end device log <<<<<<<<<<<<<<<<<\n");
+		return 0;
 	}
-																	   
+
 	int page_num = GET_PAGE_NUM(log_size, 0);
 
 	int log_patch_1 = -1, log_patch_2 = -1;
-    
+
 	buf = kmalloc(PAGE_SIZE * page_num, GFP_KERNEL);
 	if (buf) {
-		if(read + log_size >= size) {
+		if (read + log_size >= size) {
 			log_patch_2 = read + log_size - size + 1;
 			log_patch_1 = log_size - log_patch_2;
-			 
+
 		} else {
 			log_patch_1 = log_size;
 		}
-        
+
 		memcpy_fromio(buf, &log_ctrl->log->rb.data[read], log_patch_1);
-		if(log_patch_2 > 0) {
-            memcpy_fromio(buf, &log_ctrl->log->rb.data[0], log_patch_2);
+		if (log_patch_2 > 0) {
+			memcpy_fromio(buf, &log_ctrl->log->rb.data[0],
+				      log_patch_2);
 		}
-		
-		uint8_t last_fame_size  = log_size % 64;
+
+		uint8_t last_fame_size = log_size % 64;
 
 		for (i = 0; i < log_size - last_fame_size; i += 64) {
 			seq_printf(file, " %*pEp", 64, buf + i);
-	    }
-		if(last_fame_size) {
-            seq_printf(file, " %*pEp", last_fame_size, buf + log_size - last_fame_size);
 		}
-        
+		if (last_fame_size) {
+			seq_printf(file, " %*pEp", last_fame_size,
+				   buf + log_size - last_fame_size);
+		}
+
 		__raw_writel(write, &log_ctrl->log->rb.read);
-        kfree(buf);
+		kfree(buf);
 		/*dcahce clean*/
-		ALT_CMO_OP(clean, (phys_to_virt(log_ctrl->log_phy)), ((char*)log_ctrl->log_phy + sizeof(struct th1520_hw_log)), riscv_cbom_block_size);
+		ALT_CMO_OP(clean, (phys_to_virt(log_ctrl->log_phy)),
+			   sizeof(struct th1520_hw_log), riscv_cbom_block_size);
 		//seq_printf(file,"\n%d %d %d %d %d\n",log_patch_1, log_patch_2, log_size ,last_fame_size, read);
-		seq_printf(file,"\n****************** end device log <<<<<<<<<<<<<<<<<\n");
+		seq_printf(
+			file,
+			"\n****************** end device log <<<<<<<<<<<<<<<<<\n");
 		return 0;
 	} else {
 		pr_debug("Fail to alloc buf\n");
@@ -128,16 +136,17 @@ static bool th1520_panic_init(struct th1
 	return true;
 }
 
-void *th1520_create_panic_log_proc(phys_addr_t log_phy, void *dir, void *log_info_addr, size_t size)
+void *th1520_create_panic_log_proc(phys_addr_t log_phy, void *dir,
+				   void *log_info_addr, size_t size)
 {
 	struct th1520_proc_log_ctrl *log_ctrl =
 		kmalloc(sizeof(struct th1520_proc_log_ctrl), GFP_KERNEL);
 
 	if (log_ctrl == NULL)
 		return NULL;
-    
-    log_ctrl->log = log_info_addr;
-    
+
+	log_ctrl->log = log_info_addr;
+
 	th1520_panic_init(log_ctrl->log, size);
 
 	log_ctrl->log_proc_file = proc_create_single_data(
@@ -155,7 +164,8 @@ void *th1520_create_panic_log_proc(phys_
 
 void th1520_remove_panic_log_proc(void *arg)
 {
-	struct th1520_proc_log_ctrl *log_ctrl = (struct th1520_proc_log_ctrl *)arg;
+	struct th1520_proc_log_ctrl *log_ctrl =
+		(struct th1520_proc_log_ctrl *)arg;
 
 	proc_remove(log_ctrl->log_proc_file);
 	kfree(log_ctrl);
