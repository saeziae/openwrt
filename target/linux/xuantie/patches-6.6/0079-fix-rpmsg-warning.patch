From dded0526a9e9b782c434db70a5d5b373d37df34e Mon Sep 17 00:00:00 2001
From: "xiaojin.cxj" <xiaojin.cxj@linux.alibaba.com>
Date: Thu, 6 Jun 2024 20:01:38 +0800
Subject: [PATCH 079/129] fix rpmsg warning

---
 drivers/rpmsg/th1520_rpmsg.c | 440 ++++++++++++++++++-----------------
 1 file changed, 227 insertions(+), 213 deletions(-)

--- a/drivers/rpmsg/th1520_rpmsg.c
+++ b/drivers/rpmsg/th1520_rpmsg.c
@@ -46,30 +46,30 @@
 #include <linux/workqueue.h>
 #include <linux/th1520_rpmsg.h>
 #include <linux/th1520_proc_debug.h>
-#ifdef  CONFIG_PM_SLEEP
+#ifdef CONFIG_PM_SLEEP
 #include <linux/firmware/thead/ipc.h>
 //#include <linux/firmware/thead/light_event.h>
 #endif
-#define MBOX_MAX_MSG_LEN	28
+#define MBOX_MAX_MSG_LEN 28
 #define WJ_MBOX_SEND_MAX_MESSAGE_LENGTH 28
-#define HEXDUMP_BYTES_PER_LINE	28
-#define HEXDUMP_LINE_LEN	((HEXDUMP_BYTES_PER_LINE * 4) + 2)
-#define HEXDUMP_MAX_LEN		(HEXDUMP_LINE_LEN *		\
-				(MBOX_MAX_MSG_LEN / HEXDUMP_BYTES_PER_LINE))
+#define HEXDUMP_BYTES_PER_LINE 28
+#define HEXDUMP_LINE_LEN ((HEXDUMP_BYTES_PER_LINE * 4) + 2)
+#define HEXDUMP_MAX_LEN \
+	(HEXDUMP_LINE_LEN * (MBOX_MAX_MSG_LEN / HEXDUMP_BYTES_PER_LINE))
 
 //extern struct th1520_rpmsg_vproc *pri_rpdev;
 static struct dentry *root_debugfs_dir;
 
 struct mbox_client_th1520_device {
-	struct device		*dev;
-	void __iomem		*tx_mmio;
-	void __iomem		*rx_mmio;
-	struct mbox_chan	*tx_channel;
-	struct mbox_chan	*rx_channel;
-	char			*rx_buffer;
-	struct regmap 		*audio_mbox_regmap;
-	char	*message;
-	spinlock_t		lock;
+	struct device *dev;
+	void __iomem *tx_mmio;
+	void __iomem *rx_mmio;
+	struct mbox_chan *tx_channel;
+	struct mbox_chan *rx_channel;
+	char *rx_buffer;
+	struct regmap *audio_mbox_regmap;
+	char *message;
+	spinlock_t lock;
 };
 
 struct mbox_client_th1520_device *tdev_priv;
@@ -85,7 +85,7 @@ static volatile uint32_t *p_mbox_reg2;
  * 3 pages for every vring (the size of the vring depends on the number of
  * buffers it supports).
  */
-#define RPMSG_NUM_BUFS		(512)
+#define RPMSG_NUM_BUFS (512)
 //#define RPMSG_BUF_SIZE		(512)
 //#define RPMSG_BUFS_SPACE	(RPMSG_NUM_BUFS * RPMSG_BUF_SIZE)
 
@@ -94,19 +94,22 @@ static volatile uint32_t *p_mbox_reg2;
  * Note: this is part of the "wire" protocol. If you change this, you need
  * to update your BIOS image as well
  */
-#define RPMSG_VRING_ALIGN	(4096)
+#define RPMSG_VRING_ALIGN (4096)
 
 /* With 256 buffers, our vring will occupy 3 pages */
-#define RPMSG_RING_SIZE	((DIV_ROUND_UP(vring_size(RPMSG_NUM_BUFS / 2, \
-				RPMSG_VRING_ALIGN), PAGE_SIZE)) * PAGE_SIZE)
+#define RPMSG_RING_SIZE                                                   \
+	((DIV_ROUND_UP(vring_size(RPMSG_NUM_BUFS / 2, RPMSG_VRING_ALIGN), \
+		       PAGE_SIZE)) *                                      \
+	 PAGE_SIZE)
 
 #define to_th1520_virdev(vd) container_of(vd, struct th1520_virdev, vdev)
-#define to_th1520_rpdev(vd, id) container_of(vd, struct th1520_rpmsg_vproc, ivdev[id])
+#define to_th1520_rpdev(vd, id) \
+	container_of(vd, struct th1520_rpmsg_vproc, ivdev[id])
 
 struct th1520_rpmsg_vq_info {
-	__u16 num;	/* number of entries in the virtio_ring */
-	__u16 vq_id;	/* a globaly unique index of this virtqueue */
-	void *addr;	/* address where we mapped the virtio ring */
+	__u16 num; /* number of entries in the virtio_ring */
+	__u16 vq_id; /* a globaly unique index of this virtqueue */
+	void *addr; /* address where we mapped the virtio ring */
 	struct th1520_rpmsg_vproc *rpdev;
 };
 
@@ -131,8 +134,9 @@ static bool th1520_rpmsg_notify(struct v
 	struct th1520_rpmsg_vq_info *rpvq = vq->priv;
 
 #ifdef CONFIG_PM_SLEEP
-    if(rpvq->rpdev->sleep_flag) {
-        dev_err(tdev_priv->dev, "dev in deep sleep, Channel cannot do Tx+++\n");
+	if (rpvq->rpdev->sleep_flag) {
+		dev_err(tdev_priv->dev,
+			"dev in deep sleep, Channel cannot do Tx+++\n");
 		return -EINVAL;
 	}
 #endif
@@ -143,12 +147,12 @@ static bool th1520_rpmsg_notify(struct v
 	//pr_info("th1520 rpmsg: notify %d\n", rpvq->rpdev->first_notify);
 	if (unlikely(rpvq->rpdev->first_notify > 0)) {
 		rpvq->rpdev->first_notify--;
-        if (!tdev_priv->tx_channel) {
-            dev_err(tdev_priv->dev, "Channel cannot do Tx+++\n");
-            return -EINVAL;
-        }
+		if (!tdev_priv->tx_channel) {
+			dev_err(tdev_priv->dev, "Channel cannot do Tx+++\n");
+			return -EINVAL;
+		}
 
-        ret = mbox_send_message(tdev_priv->tx_channel, "Hello, Queue!");
+		ret = mbox_send_message(tdev_priv->tx_channel, "Hello, Queue!");
 	} else {
 		*p_mbox_reg1 |= 1 << 0;
 		*p_mbox_reg2 |= 1 << 0;
@@ -159,14 +163,15 @@ static bool th1520_rpmsg_notify(struct v
 }
 
 static int th1520_mu_rpmsg_callback(struct notifier_block *this,
-					unsigned long index, void *data)
+				    unsigned long index, void *data)
 {
-	u32 mu_msg = (phys_addr_t) data;
+	u32 mu_msg = (phys_addr_t)data;
 	struct th1520_virdev *virdev;
 
 	virdev = container_of(this, struct th1520_virdev, nb);
 
-	pr_debug("th1520 rpmsg: %s notifier_call mu_msg: 0x%x\n", __func__, mu_msg);
+	pr_debug("th1520 rpmsg: %s notifier_call mu_msg: 0x%x\n", __func__,
+		 mu_msg);
 	/* ignore vq indices which are clearly not for us */
 	mu_msg = mu_msg >> 16;
 	if (mu_msg < virdev->base_vq_id || mu_msg > virdev->base_vq_id + 1) {
@@ -175,7 +180,8 @@ static int th1520_mu_rpmsg_callback(stru
 	}
 
 	mu_msg -= virdev->base_vq_id;
-	pr_debug("%smu_msg 0x%xbase_vq_id 0x%xvirdev num_of_vqs0x%x\n", __func__, mu_msg, virdev->base_vq_id, virdev->num_of_vqs);
+	pr_debug("%smu_msg 0x%xbase_vq_id 0x%xvirdev num_of_vqs0x%x\n",
+		 __func__, mu_msg, virdev->base_vq_id, virdev->num_of_vqs);
 
 	/*
 	 * Currently both PENDING_MSG and explicit-virtqueue-index
@@ -184,13 +190,13 @@ static int th1520_mu_rpmsg_callback(stru
 	 * the index of the vring which was just triggered.
 	 */
 	//if (mu_msg < virdev->num_of_vqs)
-		vring_interrupt(mu_msg, virdev->vq[mu_msg]);
+	vring_interrupt(mu_msg, virdev->vq[mu_msg]);
 
 	return NOTIFY_DONE;
 }
 
 static int th1520_mu_rpmsg_register_nb(struct th1520_rpmsg_vproc *rpdev,
-		struct notifier_block *nb)
+				       struct notifier_block *nb)
 {
 	if ((rpdev == NULL) || (nb == NULL))
 		return -EINVAL;
@@ -201,7 +207,7 @@ static int th1520_mu_rpmsg_register_nb(s
 }
 
 static int th1520_mu_rpmsg_unregister_nb(struct th1520_rpmsg_vproc *rpdev,
-		struct notifier_block *nb)
+					 struct notifier_block *nb)
 {
 	if ((rpdev == NULL) || (nb == NULL))
 		return -EINVAL;
@@ -214,12 +220,11 @@ static int th1520_mu_rpmsg_unregister_nb
 static struct virtqueue *rp_find_vq(struct virtio_device *vdev,
 				    unsigned int index,
 				    void (*callback)(struct virtqueue *vq),
-				    const char *name,
-				    bool ctx)
+				    const char *name, bool ctx)
 {
 	struct th1520_virdev *virdev = to_th1520_virdev(vdev);
-	struct th1520_rpmsg_vproc *rpdev = to_th1520_rpdev(virdev,
-						     virdev->base_vq_id / 2);
+	struct th1520_rpmsg_vproc *rpdev =
+		to_th1520_rpdev(virdev, virdev->base_vq_id / 2);
 	struct th1520_rpmsg_vq_info *rpvq;
 	struct virtqueue *vq;
 	int err;
@@ -232,27 +237,25 @@ static struct virtqueue *rp_find_vq(stru
 	/* ioremap'ing normal memory, so we cast away sparse's complaints */
 	//rpvq->addr = (__force void *) ioremap_nocache(virdev->vring[index],
 	//						RPMSG_RING_SIZE);
-	rpvq->addr = (__force void *) ioremap(virdev->vring[index],
-							RPMSG_RING_SIZE);
+	rpvq->addr =
+		(__force void *)ioremap(virdev->vring[index], RPMSG_RING_SIZE);
 	if (!rpvq->addr) {
 		err = -ENOMEM;
 		goto free_rpvq;
 	}
 
-	p_mbox_reg = ioremap(0xffefc48000,25);
+	p_mbox_reg = ioremap((phys_addr_t)0xffefc48000, 25);
 	p_mbox_reg1 = p_mbox_reg + 4;
 	p_mbox_reg2 = p_mbox_reg + 5;
 
 	memset_io(rpvq->addr, 0, RPMSG_RING_SIZE);
 
 	pr_debug("vring%d: phys 0x%x, virt 0x%p\n", index, virdev->vring[index],
-					rpvq->addr);
+		 rpvq->addr);
 
 	vq = vring_new_virtqueue(index, RPMSG_NUM_BUFS / 2, RPMSG_VRING_ALIGN,
-			vdev, true, ctx,
-			rpvq->addr,
-			th1520_rpmsg_notify, callback,
-			name);
+				 vdev, true, ctx, rpvq->addr,
+				 th1520_rpmsg_notify, callback, name);
 	if (!vq) {
 		pr_err("th1520 rpmsg: vring_new_virtqueue failed\n");
 		err = -ENOMEM;
@@ -270,7 +273,7 @@ static struct virtqueue *rp_find_vq(stru
 
 unmap_vring:
 	/* iounmap normal memory, so make sparse happy */
-	iounmap((__force void __iomem *) rpvq->addr);
+	iounmap((__force void __iomem *)rpvq->addr);
 free_rpvq:
 	kfree(rpvq);
 	return ERR_PTR(err);
@@ -280,8 +283,8 @@ static void th1520_rpmsg_del_vqs(struct
 {
 	struct virtqueue *vq, *n;
 	struct th1520_virdev *virdev = to_th1520_virdev(vdev);
-	struct th1520_rpmsg_vproc *rpdev = to_th1520_rpdev(virdev,
-						     virdev->base_vq_id / 2);
+	struct th1520_rpmsg_vproc *rpdev =
+		to_th1520_rpdev(virdev, virdev->base_vq_id / 2);
 
 	list_for_each_entry_safe(vq, n, &vdev->vqs, list) {
 		struct th1520_rpmsg_vq_info *rpvq = vq->priv;
@@ -291,20 +294,18 @@ static void th1520_rpmsg_del_vqs(struct
 		kfree(rpvq);
 	}
 
-	if (&virdev->nb)
-		th1520_mu_rpmsg_unregister_nb(rpdev, &virdev->nb);
+	th1520_mu_rpmsg_unregister_nb(rpdev, &virdev->nb);
 }
 
 static int th1520_rpmsg_find_vqs(struct virtio_device *vdev, unsigned int nvqs,
-		       struct virtqueue *vqs[],
-		       vq_callback_t *callbacks[],
-		       const char * const names[],
-		       const bool *ctx,
-		       struct irq_affinity *desc)
+				 struct virtqueue *vqs[],
+				 vq_callback_t *callbacks[],
+				 const char *const names[], const bool *ctx,
+				 struct irq_affinity *desc)
 {
 	struct th1520_virdev *virdev = to_th1520_virdev(vdev);
-	struct th1520_rpmsg_vproc *rpdev = to_th1520_rpdev(virdev,
-						     virdev->base_vq_id / 2);
+	struct th1520_rpmsg_vproc *rpdev =
+		to_th1520_rpdev(virdev, virdev->base_vq_id / 2);
 	int i, err;
 
 	/* we maintain two virtqueues per remote processor (for RX and TX) */
@@ -313,7 +314,7 @@ static int th1520_rpmsg_find_vqs(struct
 
 	for (i = 0; i < nvqs; ++i) {
 		vqs[i] = rp_find_vq(vdev, i, callbacks[i], names[i],
-				ctx ? ctx[i] : false);
+				    ctx ? ctx[i] : false);
 		if (IS_ERR(vqs[i])) {
 			err = PTR_ERR(vqs[i]);
 			goto error;
@@ -353,32 +354,35 @@ static void th1520_rpmsg_vproc_release(s
 }
 
 static struct virtio_config_ops th1520_rpmsg_config_ops = {
-	.get_features	= th1520_rpmsg_get_features,
+	.get_features = th1520_rpmsg_get_features,
 	.finalize_features = th1520_rpmsg_finalize_features,
-	.find_vqs	= th1520_rpmsg_find_vqs,
-	.del_vqs	= th1520_rpmsg_del_vqs,
-	.reset		= th1520_rpmsg_reset,
-	.set_status	= th1520_rpmsg_set_status,
-	.get_status	= th1520_rpmsg_get_status,
+	.find_vqs = th1520_rpmsg_find_vqs,
+	.del_vqs = th1520_rpmsg_del_vqs,
+	.reset = th1520_rpmsg_reset,
+	.set_status = th1520_rpmsg_set_status,
+	.get_status = th1520_rpmsg_get_status,
 };
 
 static struct th1520_rpmsg_vproc th1520_rpmsg_vprocs[] = {
 	{
-		.rproc_name	= "m4",
+		.rproc_name = "m4",
 	},
 	{
-		.rproc_name	= "m4",
+		.rproc_name = "m4",
 	},
 };
 
 static const struct of_device_id th1520_rpmsg_dt_ids[] = {
-	{ .compatible = "th1520,th1520-rpmsg", .data = (void *)TH1520_RPMSG, },
+	{
+		.compatible = "th1520,th1520-rpmsg",
+		.data = (void *)TH1520_RPMSG,
+	},
 	{ /* sentinel */ }
 };
 MODULE_DEVICE_TABLE(of, th1520_rpmsg_dt_ids);
 
 static int set_vring_phy_buf(struct platform_device *pdev,
-		       struct th1520_rpmsg_vproc *rpdev, int vdev_nums)
+			     struct th1520_rpmsg_vproc *rpdev, int vdev_nums)
 {
 	struct resource *res;
 	resource_size_t size;
@@ -392,12 +396,11 @@ static int set_vring_phy_buf(struct plat
 		end = res->start + size;
 		for (i = 0; i < vdev_nums; i++) {
 			rpdev->ivdev[i].vring[0] = start;
-			rpdev->ivdev[i].vring[1] = start +
-						   0x8000;
+			rpdev->ivdev[i].vring[1] = start + 0x8000;
 			start += 0x10000;
 			if (start > end) {
 				pr_err("Too small memory size %x!\n",
-						(u32)size);
+				       (u32)size);
 				ret = -EINVAL;
 				break;
 			}
@@ -413,21 +416,21 @@ static void rpmsg_work_handler(struct wo
 {
 	u32 message = 0;
 	struct delayed_work *dwork = to_delayed_work(work);
-	struct th1520_rpmsg_vproc *rpdev = container_of(dwork,
-			struct th1520_rpmsg_vproc, rpmsg_work);
+	struct th1520_rpmsg_vproc *rpdev =
+		container_of(dwork, struct th1520_rpmsg_vproc, rpmsg_work);
 
 	//spin_lock_irqsave(&rpdev->mu_lock, flags);
 	blocking_notifier_call_chain(&(rpdev->notifier), 4,
-					(void *)(phys_addr_t)message);
+				     (void *)(phys_addr_t)message);
 	//spin_unlock_irqrestore(&rpdev->mu_lock, flags);
 }
 
 struct th1520_rpmsg_vproc *pri_rpdev;
 EXPORT_SYMBOL_GPL(pri_rpdev);
 
-int  get_audio_log_mem(struct device *dev, phys_addr_t* mem, size_t* mem_size)
+int get_audio_log_mem(struct device *dev, phys_addr_t *mem, size_t *mem_size)
 {
-    struct resource r;
+	struct resource r;
 	struct device_node *node;
 	int ret;
 
@@ -442,13 +445,13 @@ int  get_audio_log_mem(struct device *de
 
 	ret = of_address_to_resource(node, 0, &r);
 	if (ret) {
-	    dev_err(dev, "memory-region get resource faild\n");
+		dev_err(dev, "memory-region get resource faild\n");
 		return -EINVAL;
 	}
 
 	*mem = r.start;
 	*mem_size = resource_size(&r);
-    return 0;
+	return 0;
 }
 
 static int th1520_rpmsg_probe(struct platform_device *pdev)
@@ -457,20 +460,21 @@ static int th1520_rpmsg_probe(struct pla
 	struct device *dev = &pdev->dev;
 	struct device_node *np = pdev->dev.of_node;
 	struct th1520_rpmsg_vproc *rpdev;
-	char dir_name[32] = {0x0};
+	char dir_name[32] = { 0x0 };
 	if (of_property_read_u32(np, "multi-core-id", &core_id))
 		core_id = 0;
 	rpdev = &th1520_rpmsg_vprocs[core_id];
 	rpdev->core_id = core_id;
-	rpdev->variant = (enum th1520_rpmsg_variants)of_device_get_match_data(dev);
+	rpdev->variant =
+		(enum th1520_rpmsg_variants)of_device_get_match_data(dev);
 	spin_lock_init(&rpdev->mu_lock);
 
 	pri_rpdev = rpdev;
 
 	INIT_DELAYED_WORK(&(rpdev->rpmsg_work), rpmsg_work_handler);
 	BLOCKING_INIT_NOTIFIER_HEAD(&(rpdev->notifier));
-#ifdef  CONFIG_PM_SLEEP
-    sema_init(&rpdev->pm_sem, 0);
+#ifdef CONFIG_PM_SLEEP
+	sema_init(&rpdev->pm_sem, 0);
 #endif
 	pr_info("th1520 rpmsg: Ready for cross core communication!\n");
 
@@ -480,16 +484,16 @@ static int th1520_rpmsg_probe(struct pla
 	}
 
 	if (rpdev->vdev_nums > MAX_VDEV_NUMS) {
-		pr_err("th1520 rpmsg: vdev-nums exceed the max %d\n", MAX_VDEV_NUMS);
+		pr_err("th1520 rpmsg: vdev-nums exceed the max %d\n",
+		       MAX_VDEV_NUMS);
 		return -EINVAL;
 	}
 
 	rpdev->first_notify = rpdev->vdev_nums;
 
-	pr_info("th1520 rpmsg: rproc_name = %s",rpdev->rproc_name);
+	pr_info("th1520 rpmsg: rproc_name = %s", rpdev->rproc_name);
 	if (!strcmp(rpdev->rproc_name, "m4")) {
-		ret = set_vring_phy_buf(pdev, rpdev,
-					rpdev->vdev_nums);
+		ret = set_vring_phy_buf(pdev, rpdev, rpdev->vdev_nums);
 		if (ret) {
 			pr_err("th1520 rpmsg: No vring buffer.\n");
 			return -ENOMEM;
@@ -502,8 +506,7 @@ static int th1520_rpmsg_probe(struct pla
 	for (j = 0; j < rpdev->vdev_nums; j++) {
 		pr_debug("%s rpdev%d vdev%d: vring0 0x%x, vring1 0x%x\n",
 			 __func__, rpdev->core_id, rpdev->vdev_nums,
-			 rpdev->ivdev[j].vring[0],
-			 rpdev->ivdev[j].vring[1]);
+			 rpdev->ivdev[j].vring[0], rpdev->ivdev[j].vring[1]);
 		rpdev->ivdev[j].vdev.id.device = VIRTIO_ID_RPMSG;
 		rpdev->ivdev[j].vdev.config = &th1520_rpmsg_config_ops;
 		rpdev->ivdev[j].vdev.dev.parent = &pdev->dev;
@@ -512,21 +515,20 @@ static int th1520_rpmsg_probe(struct pla
 
 		ret = register_virtio_device(&rpdev->ivdev[j].vdev);
 		if (ret) {
-			pr_err("th1520 rpmsg: %s failed to register rpdev: %d\n", __func__, ret);
+			pr_err("th1520 rpmsg: %s failed to register rpdev: %d\n",
+			       __func__, ret);
 			return ret;
 		}
-
 	}
 
 	ret = get_audio_log_mem(dev, &rpdev->log_phy, &rpdev->log_size);
-	if(ret) {
-      return ret;
+	if (ret) {
+		return ret;
 	}
-    rpdev->log_mem = ioremap(rpdev->log_phy, rpdev->log_size);
+	rpdev->log_mem = ioremap(rpdev->log_phy, rpdev->log_size);
 	if (!IS_ERR(rpdev->log_mem)) {
-		printk("%s:virtual_log_mem=0x%p, phy base=0x%llx,size:%lu\n",
-			__func__, rpdev->log_mem, rpdev->log_phy,
-			rpdev->log_size);
+		pr_info("virtual_log_mem=0x%p, phy base=0x%pa\n",
+			rpdev->log_mem, &rpdev->log_phy);
 	} else {
 		rpdev->log_mem = NULL;
 		dev_err(dev, "%s:get audio log region fail\n", __func__);
@@ -534,63 +536,65 @@ static int th1520_rpmsg_probe(struct pla
 	}
 
 	sprintf(dir_name, "audio_proc");
-    rpdev->proc_dir = proc_mkdir(dir_name, NULL);
-    if (NULL != rpdev->proc_dir) {
+	rpdev->proc_dir = proc_mkdir(dir_name, NULL);
+	if (NULL != rpdev->proc_dir) {
 		rpdev->log_ctrl = th1520_create_panic_log_proc(rpdev->log_phy,
-			rpdev->proc_dir, rpdev->log_mem, rpdev->log_size);
+							       rpdev->proc_dir,
+							       rpdev->log_mem,
+							       rpdev->log_size);
 	} else {
 		dev_err(dev, "create %s fail\n", dir_name);
 		return ret;
 	}
 
-    platform_set_drvdata(pdev, rpdev);
+	platform_set_drvdata(pdev, rpdev);
 
 	return ret;
-
 }
 
 #ifdef CONFIG_PM_SLEEP
 
 typedef enum {
-   RPMSG_MAILBOX_TYPE_PM = 0xA0,
-   RPMSG_MAILBOX_TYPE_MAX
+	RPMSG_MAILBOX_TYPE_PM = 0xA0,
+	RPMSG_MAILBOX_TYPE_MAX
 } rpmsg_mailbox_message_type_en;
 
 typedef enum {
-   RPMSG_PM_CTRL = 0x50,
-   RPMSG_PM_GET,
-   RPMSG_PM_STATUS,
-   RPMSG_PM_MAX
+	RPMSG_PM_CTRL = 0x50,
+	RPMSG_PM_GET,
+	RPMSG_PM_STATUS,
+	RPMSG_PM_MAX
 } rpmsg_pm_message_type_en;
 
 typedef enum {
-   TH1520_PM_DISABLE = 0xA0,
-   TH1520_PM_OFF,
-   TH1520_PM_HW_VAD,
-   TH1520_PM_TYPE_MAX
+	TH1520_PM_DISABLE = 0xA0,
+	TH1520_PM_OFF,
+	TH1520_PM_HW_VAD,
+	TH1520_PM_TYPE_MAX
 } th1520_pm_type_en;
 
 typedef enum {
-   TH1520_PM_WAKEUP = 0x50,
-   TH1520_PM_SLEEP,
-   TH1520_PM_STATUS_MAX
+	TH1520_PM_WAKEUP = 0x50,
+	TH1520_PM_SLEEP,
+	TH1520_PM_STATUS_MAX
 } th1520_pm_status_en;
 
 #define MAX_PM_NOTIFY_TIME 10
 #define MAX_PM_ASK_TIME 10
 
-
-static int th1520_rpmsg_sleep_notify(struct virtqueue *vq, th1520_pm_type_en type)
+static int th1520_rpmsg_sleep_notify(struct virtqueue *vq,
+				     th1520_pm_type_en type)
 {
 	int ret;
 	struct th1520_rpmsg_vq_info *rpvq = vq->priv;
-	uint8_t sleep_ctrl[4] = {RPMSG_MAILBOX_TYPE_PM, RPMSG_PM_CTRL, type, '\n'};
+	uint8_t sleep_ctrl[4] = { RPMSG_MAILBOX_TYPE_PM, RPMSG_PM_CTRL, type,
+				  '\n' };
 	mutex_lock(&rpvq->rpdev->lock);
 	ret = mbox_send_message(tdev_priv->tx_channel, sleep_ctrl);
-	if(ret < 0) {
-       pr_err("sleep notify faild %d", ret);
-	   mutex_unlock(&rpvq->rpdev->lock);
-       return ret;
+	if (ret < 0) {
+		pr_err("sleep notify faild %d", ret);
+		mutex_unlock(&rpvq->rpdev->lock);
+		return ret;
 	}
 	mutex_unlock(&rpvq->rpdev->lock);
 	return 0;
@@ -600,13 +604,13 @@ static int th1520_rpmsg_sleep_ask(struct
 {
 	int ret;
 	struct th1520_rpmsg_vq_info *rpvq = vq->priv;
-	uint8_t sleep_get[3] = {RPMSG_MAILBOX_TYPE_PM, RPMSG_PM_GET, '\n'};
+	uint8_t sleep_get[3] = { RPMSG_MAILBOX_TYPE_PM, RPMSG_PM_GET, '\n' };
 	mutex_lock(&rpvq->rpdev->lock);
 	ret = mbox_send_message(tdev_priv->tx_channel, sleep_get);
-	if(ret < 0) {
-       pr_err("sleep ask send faild %d", ret);
-	   mutex_unlock(&rpvq->rpdev->lock);
-       return ret;
+	if (ret < 0) {
+		pr_err("sleep ask send faild %d", ret);
+		mutex_unlock(&rpvq->rpdev->lock);
+		return ret;
 	}
 	mutex_unlock(&rpvq->rpdev->lock);
 	return 0;
@@ -615,36 +619,37 @@ static int th1520_rpmsg_sleep_ask(struct
 static int th1520_rpmsg_suspend(struct device *dev)
 
 {
-  int try_num = 0;
-  struct th1520_rpmsg_vproc *rpdev = dev_get_drvdata(dev);
+	int try_num = 0;
+	struct th1520_rpmsg_vproc *rpdev = dev_get_drvdata(dev);
 
-  //clk_disable_unprepare(rpdev->mu_clk);
-  th1520_rpmsg_sleep_notify(rpdev->ivdev[0].vq[0], TH1520_PM_OFF);
-  try_num++;
-  if(down_timeout(&rpdev->pm_sem, msecs_to_jiffies(200)) < 0) {
-	  pr_info("Wait pm_sem timeout\n");
-  }
-  while(!rpdev->sleep_flag) {
-    th1520_rpmsg_sleep_notify(rpdev->ivdev[0].vq[0], TH1520_PM_OFF);
-	if(down_timeout(&rpdev->pm_sem, msecs_to_jiffies(200)) < 0) {
+	//clk_disable_unprepare(rpdev->mu_clk);
+	th1520_rpmsg_sleep_notify(rpdev->ivdev[0].vq[0], TH1520_PM_OFF);
+	try_num++;
+	if (down_timeout(&rpdev->pm_sem, msecs_to_jiffies(200)) < 0) {
 		pr_info("Wait pm_sem timeout\n");
 	}
-	if(try_num++ > MAX_PM_NOTIFY_TIME) {
-         pr_err("sleep notify faild after try %d time", MAX_PM_NOTIFY_TIME);
-		 printk("%s,%d,try %d times, exist",__func__,__LINE__, try_num);
-		 return -1;
-	}
-  }
-  printk("%s,%d,try %d times, exist",__func__,__LINE__, try_num);
-  return 0;
-}
-
-#define C906_RESET_REG                  0xfffff4403c
-
-static void reset_audio(void) {
-	uint64_t *v_addr = ioremap(C906_RESET_REG, 4);
-	if(!v_addr) {
-		printk("io remap failed\r\n");
+	while (!rpdev->sleep_flag) {
+		th1520_rpmsg_sleep_notify(rpdev->ivdev[0].vq[0], TH1520_PM_OFF);
+		if (down_timeout(&rpdev->pm_sem, msecs_to_jiffies(200)) < 0) {
+			pr_info("Wait pm_sem timeout\n");
+		}
+		if (try_num++ > MAX_PM_NOTIFY_TIME) {
+			pr_err("sleep notify faild after try %d time",
+			       MAX_PM_NOTIFY_TIME);
+			return -1;
+		}
+	}
+	pr_info("%s,%d,try %d times, exist", __func__, __LINE__, try_num);
+	return 0;
+}
+
+#define C906_RESET_REG 0xfffff4403c
+
+static void reset_audio(void)
+{
+	uint64_t *v_addr = ioremap((phys_addr_t)C906_RESET_REG, 4);
+	if (!v_addr) {
+		pr_err("io remap failed\r\n");
 		return;
 	}
 	writel(0x37, (volatile void *)v_addr);
@@ -654,34 +659,36 @@ static void reset_audio(void) {
 
 static int th1520_rpmsg_resume(struct device *dev)
 {
-  struct th1520_rpmsg_vproc *rpdev = dev_get_drvdata(dev);
-  int ret;
-  int try_num = 0;
-  int rst_flag = 0;
-
-  while(rpdev->sleep_flag) {
-    ret = th1520_rpmsg_sleep_ask(rpdev->ivdev[0].vq[0]);
-    if(down_timeout(&rpdev->pm_sem, msecs_to_jiffies(200)) < 0) {
-		pr_info("Wait pm_sem timeout\n");
-	}
-	if(try_num++ > MAX_PM_ASK_TIME) {
-         pr_err("sleep status check faild after try %d time", MAX_PM_ASK_TIME);
-		 if(!rst_flag) {
-             printk("Reset audio directly now");
-			 reset_audio();
-			 rst_flag = 1;
-			 try_num = 0;
-		 } else {
-			 pr_err("sleep states check failed after Reset audio");
-             return -1;
-		 }
+	struct th1520_rpmsg_vproc *rpdev = dev_get_drvdata(dev);
+	int ret;
+	int try_num = 0;
+	int rst_flag = 0;
+
+	while (rpdev->sleep_flag) {
+		ret = th1520_rpmsg_sleep_ask(rpdev->ivdev[0].vq[0]);
+		if (down_timeout(&rpdev->pm_sem, msecs_to_jiffies(200)) < 0) {
+			pr_info("Wait pm_sem timeout\n");
+		}
+		if (try_num++ > MAX_PM_ASK_TIME) {
+			pr_err("sleep status check faild after try %d time",
+			       MAX_PM_ASK_TIME);
+			if (!rst_flag) {
+				pr_info("Reset audio directly now");
+				reset_audio();
+				rst_flag = 1;
+				try_num = 0;
+			} else {
+				pr_err("sleep states check failed after Reset audio");
+				return -1;
+			}
+		}
 	}
-  }
-  return 0;
+	return 0;
 }
 #endif
 
-static SIMPLE_DEV_PM_OPS(th1520_rpmsg_pm_ops, th1520_rpmsg_suspend, th1520_rpmsg_resume);
+static SIMPLE_DEV_PM_OPS(th1520_rpmsg_pm_ops, th1520_rpmsg_suspend,
+			 th1520_rpmsg_resume);
 
 static struct platform_driver th1520_rpmsg_driver = {
 	.driver = {
@@ -712,8 +719,8 @@ MODULE_LICENSE("GPL v2");
 late_initcall(th1520_rpmsg_init);
 
 static ssize_t mbox_client_th1520_message_write(struct file *filp,
-					      const char __user *userbuf,
-					      size_t count, loff_t *ppos)
+						const char __user *userbuf,
+						size_t count, loff_t *ppos)
 {
 	struct mbox_client_th1520_device *tdev = filp->private_data;
 	void *data;
@@ -738,7 +745,8 @@ static ssize_t mbox_client_th1520_messag
 	}
 
 	data = tdev->message;
-	print_hex_dump(KERN_INFO, __func__, DUMP_PREFIX_NONE, 16, 1, tdev->message, MBOX_MAX_MSG_LEN, true);
+	print_hex_dump(KERN_INFO, __func__, DUMP_PREFIX_NONE, 16, 1,
+		       tdev->message, MBOX_MAX_MSG_LEN, true);
 
 	ret = mbox_send_message(tdev->tx_channel, data);
 	if (ret < 0)
@@ -750,13 +758,14 @@ out:
 }
 
 static ssize_t mbox_client_th1520_message_read(struct file *filp,
-					     char __user *userbuf,
-					     size_t count, loff_t *ppos)
+					       char __user *userbuf,
+					       size_t count, loff_t *ppos)
 {
 	struct mbox_client_th1520_device *tdev = filp->private_data;
 	unsigned long flags;
 
-	print_hex_dump(KERN_INFO, __func__, DUMP_PREFIX_NONE, 16, 1, tdev->rx_buffer, MBOX_MAX_MSG_LEN, true);
+	print_hex_dump(KERN_INFO, __func__, DUMP_PREFIX_NONE, 16, 1,
+		       tdev->rx_buffer, MBOX_MAX_MSG_LEN, true);
 	spin_lock_irqsave(&tdev->lock, flags);
 	memset(tdev->rx_buffer, 0, MBOX_MAX_MSG_LEN);
 	spin_unlock_irqrestore(&tdev->lock, flags);
@@ -765,18 +774,19 @@ static ssize_t mbox_client_th1520_messag
 }
 
 static const struct file_operations mbox_client_th1520_message_ops = {
-	.write	= mbox_client_th1520_message_write,
-	.read	= mbox_client_th1520_message_read,
-	.open	= simple_open,
-	.llseek	= generic_file_llseek,
+	.write = mbox_client_th1520_message_write,
+	.read = mbox_client_th1520_message_read,
+	.open = simple_open,
+	.llseek = generic_file_llseek,
 };
 
 static int index_names = 0;
 static bool debugfs_dir_created = false;
-static const char* file_names[] = {"mbox-client0", "mbox-client1"};
+static const char *file_names[] = { "mbox-client0", "mbox-client1" };
 
-static int mbox_client_th1520_add_debugfs(struct platform_device *pdev,
-					struct mbox_client_th1520_device *tdev)
+static int
+mbox_client_th1520_add_debugfs(struct platform_device *pdev,
+			       struct mbox_client_th1520_device *tdev)
 {
 	if (!debugfs_initialized())
 		return 0;
@@ -787,7 +797,7 @@ static int mbox_client_th1520_add_debugf
 	}
 
 	if (!debugfs_dir_created) {
-		root_debugfs_dir = debugfs_create_dir("mailbox",NULL);
+		root_debugfs_dir = debugfs_create_dir("mailbox", NULL);
 		if (!root_debugfs_dir) {
 			dev_err(&pdev->dev,
 				"Failed to create mailbox debugfs\n");
@@ -804,7 +814,7 @@ static int mbox_client_th1520_add_debugf
 }
 
 static void mbox_client_th1520_receive_message(struct mbox_client *client,
-					     void *message)
+					       void *message)
 {
 	struct mbox_client_th1520_device *tdev = dev_get_drvdata(client->dev);
 	char *data = message;
@@ -815,24 +825,24 @@ static void mbox_client_th1520_receive_m
 
 	schedule_delayed_work(&(pri_rpdev->rpmsg_work), 0);
 #ifdef CONFIG_PM_SLEEP
-     if(data[0] == RPMSG_MAILBOX_TYPE_PM && data[1] == RPMSG_PM_STATUS) {
-        if(data[2] == TH1520_PM_WAKEUP) {
-            pri_rpdev->sleep_flag = 0;
+	if (data[0] == RPMSG_MAILBOX_TYPE_PM && data[1] == RPMSG_PM_STATUS) {
+		if (data[2] == TH1520_PM_WAKEUP) {
+			pri_rpdev->sleep_flag = 0;
 			up(&pri_rpdev->pm_sem);
-			printk("audio wakeup");
-		} else if(data[2] == TH1520_PM_SLEEP) {
-            pri_rpdev->sleep_flag = 1;
+			pr_info("audio wakeup");
+		} else if (data[2] == TH1520_PM_SLEEP) {
+			pri_rpdev->sleep_flag = 1;
 			up(&pri_rpdev->pm_sem);
-			printk("audio sleep");
+			pr_info("audio sleep");
 		}
-	 }
+	}
 #endif
 	//print_hex_dump(KERN_INFO, __func__, DUMP_PREFIX_NONE, 16, 1, tdev->rx_buffer, MBOX_MAX_MSG_LEN, true);
 }
 
 static struct mbox_chan *
 mbox_client_th1520_request_channel(struct platform_device *pdev,
-				 const char *name)
+				   const char *name)
 {
 	struct mbox_client *client;
 	struct mbox_chan *channel;
@@ -841,11 +851,11 @@ mbox_client_th1520_request_channel(struc
 	if (!client)
 		return ERR_PTR(-ENOMEM);
 
-	client->dev		= &pdev->dev;
-	client->tx_block	= true;
-	client->knows_txdone	= false;
-	client->tx_tout		= 500;
-	client->rx_callback	= mbox_client_th1520_receive_message;
+	client->dev = &pdev->dev;
+	client->tx_block = true;
+	client->knows_txdone = false;
+	client->tx_tout = 500;
+	client->rx_callback = mbox_client_th1520_receive_message;
 
 	channel = mbox_request_channel_byname(client, name);
 	if (IS_ERR(channel)) {
@@ -872,9 +882,11 @@ static int mbox_client_th1520_probe(stru
 	tdev_priv = tdev;
 
 	if (!chan_idx)
-		tdev->tx_channel = mbox_client_th1520_request_channel(pdev, "902");
+		tdev->tx_channel =
+			mbox_client_th1520_request_channel(pdev, "902");
 	else
-		tdev->tx_channel = mbox_client_th1520_request_channel(pdev, "906");
+		tdev->tx_channel =
+			mbox_client_th1520_request_channel(pdev, "906");
 
 	if (!tdev->tx_channel) {
 		dev_err(&pdev->dev, "Request channel failed\n");
@@ -888,17 +900,19 @@ static int mbox_client_th1520_probe(stru
 	tdev->dev = &pdev->dev;
 	platform_set_drvdata(pdev, tdev);
 
-	tdev->audio_mbox_regmap = syscon_regmap_lookup_by_phandle(np, "audio-mbox-regmap");
+	tdev->audio_mbox_regmap =
+		syscon_regmap_lookup_by_phandle(np, "audio-mbox-regmap");
 	if (IS_ERR(tdev->audio_mbox_regmap)) {
-		dev_err(&pdev->dev, "cannot find regmap for audio mbox register\n");
+		dev_err(&pdev->dev,
+			"cannot find regmap for audio mbox register\n");
 	} else {
 		dev_dbg(&pdev->dev, "audio_mbox_regmap ok\n");
 	}
 
 	spin_lock_init(&tdev->lock);
 
-	tdev->rx_buffer = devm_kzalloc(&pdev->dev,
-					MBOX_MAX_MSG_LEN, GFP_KERNEL);
+	tdev->rx_buffer =
+		devm_kzalloc(&pdev->dev, MBOX_MAX_MSG_LEN, GFP_KERNEL);
 	if (!tdev->rx_buffer)
 		return -ENOMEM;
 
